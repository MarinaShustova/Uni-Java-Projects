package de.mslab.ciphers;

import de.mslab.core.ByteArray;

/**
 * Implements the compression function of the hash function WHIRLPOOL, which was 
 * designed 2000 by Barreto and Rijmen.   
 * 
 */
public class WhirlpoolCipher extends AbstractRoundBasedBlockCipher {
	
	public static final int NUM_BYTES_IN_512_BIT = 512 / Byte.SIZE;
	public static final int NUM_COLUMNS_IN_STATE = 8;
	public static final int NUM_ROWS_IN_STATE = 8;
	public static final int NUM_ROUNDS = 10;
	
	public static final int[] INVERSE_SBOX = { 
		0x81,0x06,0x51,0xdb,0xbf,0x36,0x9e,0x4b,0x79,0xf3,0x2b,0xe5,0x15,0xc3,0xa2,0x61,
		0x32,0xcb,0x77,0xd5,0xee,0x20,0xf0,0x45,0x00,0x55,0x6e,0x87,0x99,0x18,0xbb,0xa3,
		0x6c,0xb9,0x73,0x01,0xc7,0xaa,0x5d,0x39,0xfc,0x2a,0xe0,0x83,0xd6,0x49,0x1c,0x96,
		0x8e,0xe8,0x5e,0x4f,0x66,0x17,0x08,0x22,0xb2,0xae,0xf1,0xc8,0xd0,0x7f,0x35,0x90,
		0x78,0x3a,0xf9,0xbc,0xdd,0x8c,0xeb,0x46,0x67,0x56,0x26,0x1d,0xaf,0x9b,0xcd,0x07,
		0x8b,0xc0,0x0f,0xe3,0x71,0x91,0xdc,0x1f,0x28,0xab,0x4d,0x5a,0xfd,0x31,0xb0,0x6b,
		0x10,0xb7,0xa4,0x50,0x74,0x94,0x43,0x37,0x6d,0xf2,0x8a,0x2e,0xe7,0xc2,0xd9,0x0d,
		0xf4,0x53,0xad,0x76,0xe9,0x9d,0x84,0x21,0xb1,0x0c,0x69,0x16,0x42,0x3d,0xc6,0xde,
		0x63,0xd1,0x85,0x4e,0xac,0x2f,0xff,0x04,0x5b,0xed,0x9f,0x3b,0xb3,0x7e,0x13,0xcc,
		0x6a,0x0e,0x9c,0x72,0xd2,0x3e,0xa7,0x80,0xfa,0xc1,0x5c,0x12,0xba,0xe6,0x47,0x24,
		0x2d,0x7d,0x92,0x14,0xfb,0xb5,0x09,0x3c,0xa6,0xdf,0x52,0xc9,0xec,0x4c,0x6f,0x89,
		0x5f,0x2c,0xa0,0xb8,0x70,0x88,0xf5,0xce,0x05,0xd4,0x95,0xe1,0x11,0x30,0x64,0x4a,
		0x97,0xe2,0x1b,0x7a,0xda,0xa9,0x02,0xbd,0x54,0x29,0x48,0x34,0xf8,0x65,0xca,0x82,
		0xf6,0xb4,0x0a,0xd7,0xa5,0x62,0x86,0x1a,0x3f,0x57,0x27,0x7c,0xe4,0x44,0x98,0xc5,
		0x19,0xef,0xb6,0x59,0x38,0x23,0xa1,0xd8,0x03,0x60,0x93,0xcf,0x7b,0xf7,0x41,0x8f,
		0x25,0x75,0x58,0x8d,0x33,0x0b,0xea,0xd3,0xfe,0xa8,0xc4,0x40,0xbe,0x9a,0x1e,0x68
	};
	public static int[][] ROUND_CONSTANTS = {
		{ 0x18,0x23,0xc6,0xe8,0x87,0xb8,0x01,0x4f }, 
		{ 0x36,0xa6,0xd2,0xf5,0x79,0x6f,0x91,0x52 }, 
		{ 0x60,0xbc,0x9b,0x8e,0xa3,0x0c,0x7b,0x35 }, 
		{ 0x1d,0xe0,0xd7,0xc2,0x2e,0x4b,0xfe,0x57 }, 
		{ 0x15,0x77,0x37,0xe5,0x9f,0xf0,0x4a,0xda }, 
		{ 0x58,0xc9,0x29,0x0a,0xb1,0xa0,0x6b,0x85 }, 
		{ 0xbd,0x5d,0x10,0xf4,0xcb,0x3e,0x05,0x67 }, 
		{ 0xe4,0x27,0x41,0x8b,0xa7,0x7d,0x95,0xd8 }, 
		{ 0xfb,0xee,0x7c,0x66,0xdd,0x17,0x47,0x9e }, 
		{ 0xca,0x2d,0xbf,0x07,0xad,0x5a,0x83,0x33 }
	};
	public static final int[] SBOX = {
		0x18, 0x23, 0xc6, 0xE8, 0x87, 0xB8, 0x01, 0x4F, 0x36, 0xA6, 0xd2, 0xF5, 0x79, 0x6F, 0x91, 0x52, 
		0x60, 0xBc, 0x9B, 0x8E, 0xA3, 0x0c, 0x7B, 0x35, 0x1d, 0xE0, 0xd7, 0xc2, 0x2E, 0x4B, 0xFE, 0x57, 
		0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xdA, 0x58, 0xc9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85, 
		0xBd, 0x5d, 0x10, 0xF4, 0xcB, 0x3E, 0x05, 0x67, 0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7d, 0x95, 0xd8, 
		0xFB, 0xEE, 0x7c, 0x66, 0xdd, 0x17, 0x47, 0x9E, 0xcA, 0x2d, 0xBF, 0x07, 0xAd, 0x5A, 0x83, 0x33, 
		0x63, 0x02, 0xAA, 0x71, 0xc8, 0x19, 0x49, 0xd9, 0xF2, 0xE3, 0x5B, 0x88, 0x9A, 0x26, 0x32, 0xB0, 
		0xE9, 0x0F, 0xd5, 0x80, 0xBE, 0xcd, 0x34, 0x48, 0xFF, 0x7A, 0x90, 0x5F, 0x20, 0x68, 0x1A, 0xAE, 
		0xB4, 0x54, 0x93, 0x22, 0x64, 0xF1, 0x73, 0x12, 0x40, 0x08, 0xc3, 0xEc, 0xdB, 0xA1, 0x8d, 0x3d, 
		0x97, 0x00, 0xcF, 0x2B, 0x76, 0x82, 0xd6, 0x1B, 0xB5, 0xAF, 0x6A, 0x50, 0x45, 0xF3, 0x30, 0xEF, 
		0x3F, 0x55, 0xA2, 0xEA, 0x65, 0xBA, 0x2F, 0xc0, 0xdE, 0x1c, 0xFd, 0x4d, 0x92, 0x75, 0x06, 0x8A, 
		0xB2, 0xE6, 0x0E, 0x1F, 0x62, 0xd4, 0xA8, 0x96, 0xF9, 0xc5, 0x25, 0x59, 0x84, 0x72, 0x39, 0x4c, 
		0x5E, 0x78, 0x38, 0x8c, 0xd1, 0xA5, 0xE2, 0x61, 0xB3, 0x21, 0x9c, 0x1E, 0x43, 0xc7, 0xFc, 0x04, 
		0x51, 0x99, 0x6d, 0x0d, 0xFA, 0xdF, 0x7E, 0x24, 0x3B, 0xAB, 0xcE, 0x11, 0x8F, 0x4E, 0xB7, 0xEB, 
		0x3c, 0x81, 0x94, 0xF7, 0xB9, 0x13, 0x2c, 0xd3, 0xE7, 0x6E, 0xc4, 0x03, 0x56, 0x44, 0x7F, 0xA9, 
		0x2A, 0xBB, 0xc1, 0x53, 0xdc, 0x0B, 0x9d, 0x6c, 0x31, 0x74, 0xF6, 0x46, 0xAc, 0x89, 0x14, 0xE1, 
		0x16, 0x3A, 0x69, 0x09, 0x70, 0xB6, 0xd0, 0xEd, 0xcc, 0x42, 0x98, 0xA4, 0x28, 0x5c, 0xF8, 0x86 
	};
	
	// MixRows
	//   1   1   4   1   8   5   2   9
	private static final int[] XTIMES_02 = { 
		0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
		0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
		0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
		0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
		0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
		0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
		0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
		0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
		0x1d,0x1f,0x19,0x1b,0x15,0x17,0x11,0x13,0x0d,0x0f,0x09,0x0b,0x05,0x07,0x01,0x03,
		0x3d,0x3f,0x39,0x3b,0x35,0x37,0x31,0x33,0x2d,0x2f,0x29,0x2b,0x25,0x27,0x21,0x23,
		0x5d,0x5f,0x59,0x5b,0x55,0x57,0x51,0x53,0x4d,0x4f,0x49,0x4b,0x45,0x47,0x41,0x43,
		0x7d,0x7f,0x79,0x7b,0x75,0x77,0x71,0x73,0x6d,0x6f,0x69,0x6b,0x65,0x67,0x61,0x63,
		0x9d,0x9f,0x99,0x9b,0x95,0x97,0x91,0x93,0x8d,0x8f,0x89,0x8b,0x85,0x87,0x81,0x83,
		0xbd,0xbf,0xb9,0xbb,0xb5,0xb7,0xb1,0xb3,0xad,0xaf,0xa9,0xab,0xa5,0xa7,0xa1,0xa3,
		0xdd,0xdf,0xd9,0xdb,0xd5,0xd7,0xd1,0xd3,0xcd,0xcf,0xc9,0xcb,0xc5,0xc7,0xc1,0xc3,
		0xfd,0xff,0xf9,0xfb,0xf5,0xf7,0xf1,0xf3,0xed,0xef,0xe9,0xeb,0xe5,0xe7,0xe1,0xe3
	};
	private static final int[] XTIMES_04 = { 
		0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c,0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c,
		0x40,0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,0x64,0x68,0x6c,0x70,0x74,0x78,0x7c,
		0x80,0x84,0x88,0x8c,0x90,0x94,0x98,0x9c,0xa0,0xa4,0xa8,0xac,0xb0,0xb4,0xb8,0xbc,
		0xc0,0xc4,0xc8,0xcc,0xd0,0xd4,0xd8,0xdc,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,0xfc,
		0x1d,0x19,0x15,0x11,0x0d,0x09,0x05,0x01,0x3d,0x39,0x35,0x31,0x2d,0x29,0x25,0x21,
		0x5d,0x59,0x55,0x51,0x4d,0x49,0x45,0x41,0x7d,0x79,0x75,0x71,0x6d,0x69,0x65,0x61,
		0x9d,0x99,0x95,0x91,0x8d,0x89,0x85,0x81,0xbd,0xb9,0xb5,0xb1,0xad,0xa9,0xa5,0xa1,
		0xdd,0xd9,0xd5,0xd1,0xcd,0xc9,0xc5,0xc1,0xfd,0xf9,0xf5,0xf1,0xed,0xe9,0xe5,0xe1,
		0x3a,0x3e,0x32,0x36,0x2a,0x2e,0x22,0x26,0x1a,0x1e,0x12,0x16,0x0a,0x0e,0x02,0x06,
		0x7a,0x7e,0x72,0x76,0x6a,0x6e,0x62,0x66,0x5a,0x5e,0x52,0x56,0x4a,0x4e,0x42,0x46,
		0xba,0xbe,0xb2,0xb6,0xaa,0xae,0xa2,0xa6,0x9a,0x9e,0x92,0x96,0x8a,0x8e,0x82,0x86,
		0xfa,0xfe,0xf2,0xf6,0xea,0xee,0xe2,0xe6,0xda,0xde,0xd2,0xd6,0xca,0xce,0xc2,0xc6,
		0x27,0x23,0x2f,0x2b,0x37,0x33,0x3f,0x3b,0x07,0x03,0x0f,0x0b,0x17,0x13,0x1f,0x1b,
		0x67,0x63,0x6f,0x6b,0x77,0x73,0x7f,0x7b,0x47,0x43,0x4f,0x4b,0x57,0x53,0x5f,0x5b,
		0xa7,0xa3,0xaf,0xab,0xb7,0xb3,0xbf,0xbb,0x87,0x83,0x8f,0x8b,0x97,0x93,0x9f,0x9b,
		0xe7,0xe3,0xef,0xeb,0xf7,0xf3,0xff,0xfb,0xc7,0xc3,0xcf,0xcb,0xd7,0xd3,0xdf,0xdb
	};
	private static final int[] XTIMES_05 = { 
		0x00,0x05,0x0a,0x0f,0x14,0x11,0x1e,0x1b,0x28,0x2d,0x22,0x27,0x3c,0x39,0x36,0x33,
		0x50,0x55,0x5a,0x5f,0x44,0x41,0x4e,0x4b,0x78,0x7d,0x72,0x77,0x6c,0x69,0x66,0x63,
		0xa0,0xa5,0xaa,0xaf,0xb4,0xb1,0xbe,0xbb,0x88,0x8d,0x82,0x87,0x9c,0x99,0x96,0x93,
		0xf0,0xf5,0xfa,0xff,0xe4,0xe1,0xee,0xeb,0xd8,0xdd,0xd2,0xd7,0xcc,0xc9,0xc6,0xc3,
		0x5d,0x58,0x57,0x52,0x49,0x4c,0x43,0x46,0x75,0x70,0x7f,0x7a,0x61,0x64,0x6b,0x6e,
		0x0d,0x08,0x07,0x02,0x19,0x1c,0x13,0x16,0x25,0x20,0x2f,0x2a,0x31,0x34,0x3b,0x3e,
		0xfd,0xf8,0xf7,0xf2,0xe9,0xec,0xe3,0xe6,0xd5,0xd0,0xdf,0xda,0xc1,0xc4,0xcb,0xce,
		0xad,0xa8,0xa7,0xa2,0xb9,0xbc,0xb3,0xb6,0x85,0x80,0x8f,0x8a,0x91,0x94,0x9b,0x9e,
		0xba,0xbf,0xb0,0xb5,0xae,0xab,0xa4,0xa1,0x92,0x97,0x98,0x9d,0x86,0x83,0x8c,0x89,
		0xea,0xef,0xe0,0xe5,0xfe,0xfb,0xf4,0xf1,0xc2,0xc7,0xc8,0xcd,0xd6,0xd3,0xdc,0xd9,
		0x1a,0x1f,0x10,0x15,0x0e,0x0b,0x04,0x01,0x32,0x37,0x38,0x3d,0x26,0x23,0x2c,0x29,
		0x4a,0x4f,0x40,0x45,0x5e,0x5b,0x54,0x51,0x62,0x67,0x68,0x6d,0x76,0x73,0x7c,0x79,
		0xe7,0xe2,0xed,0xe8,0xf3,0xf6,0xf9,0xfc,0xcf,0xca,0xc5,0xc0,0xdb,0xde,0xd1,0xd4,
		0xb7,0xb2,0xbd,0xb8,0xa3,0xa6,0xa9,0xac,0x9f,0x9a,0x95,0x90,0x8b,0x8e,0x81,0x84,
		0x47,0x42,0x4d,0x48,0x53,0x56,0x59,0x5c,0x6f,0x6a,0x65,0x60,0x7b,0x7e,0x71,0x74,
		0x17,0x12,0x1d,0x18,0x03,0x06,0x09,0x0c,0x3f,0x3a,0x35,0x30,0x2b,0x2e,0x21,0x24
	};
	private static final int[] XTIMES_08 = { 
		0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78,
		0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8,
		0x1d,0x15,0x0d,0x05,0x3d,0x35,0x2d,0x25,0x5d,0x55,0x4d,0x45,0x7d,0x75,0x6d,0x65,
		0x9d,0x95,0x8d,0x85,0xbd,0xb5,0xad,0xa5,0xdd,0xd5,0xcd,0xc5,0xfd,0xf5,0xed,0xe5,
		0x3a,0x32,0x2a,0x22,0x1a,0x12,0x0a,0x02,0x7a,0x72,0x6a,0x62,0x5a,0x52,0x4a,0x42,
		0xba,0xb2,0xaa,0xa2,0x9a,0x92,0x8a,0x82,0xfa,0xf2,0xea,0xe2,0xda,0xd2,0xca,0xc2,
		0x27,0x2f,0x37,0x3f,0x07,0x0f,0x17,0x1f,0x67,0x6f,0x77,0x7f,0x47,0x4f,0x57,0x5f,
		0xa7,0xaf,0xb7,0xbf,0x87,0x8f,0x97,0x9f,0xe7,0xef,0xf7,0xff,0xc7,0xcf,0xd7,0xdf,
		0x74,0x7c,0x64,0x6c,0x54,0x5c,0x44,0x4c,0x34,0x3c,0x24,0x2c,0x14,0x1c,0x04,0x0c,
		0xf4,0xfc,0xe4,0xec,0xd4,0xdc,0xc4,0xcc,0xb4,0xbc,0xa4,0xac,0x94,0x9c,0x84,0x8c,
		0x69,0x61,0x79,0x71,0x49,0x41,0x59,0x51,0x29,0x21,0x39,0x31,0x09,0x01,0x19,0x11,
		0xe9,0xe1,0xf9,0xf1,0xc9,0xc1,0xd9,0xd1,0xa9,0xa1,0xb9,0xb1,0x89,0x81,0x99,0x91,
		0x4e,0x46,0x5e,0x56,0x6e,0x66,0x7e,0x76,0x0e,0x06,0x1e,0x16,0x2e,0x26,0x3e,0x36,
		0xce,0xc6,0xde,0xd6,0xee,0xe6,0xfe,0xf6,0x8e,0x86,0x9e,0x96,0xae,0xa6,0xbe,0xb6,
		0x53,0x5b,0x43,0x4b,0x73,0x7b,0x63,0x6b,0x13,0x1b,0x03,0x0b,0x33,0x3b,0x23,0x2b,
		0xd3,0xdb,0xc3,0xcb,0xf3,0xfb,0xe3,0xeb,0x93,0x9b,0x83,0x8b,0xb3,0xbb,0xa3,0xab
	};
	private static final int[] XTIMES_09 = { 
		0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
		0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
		0x3d,0x34,0x2f,0x26,0x19,0x10,0x0b,0x02,0x75,0x7c,0x67,0x6e,0x51,0x58,0x43,0x4a,
		0xad,0xa4,0xbf,0xb6,0x89,0x80,0x9b,0x92,0xe5,0xec,0xf7,0xfe,0xc1,0xc8,0xd3,0xda,
		0x7a,0x73,0x68,0x61,0x5e,0x57,0x4c,0x45,0x32,0x3b,0x20,0x29,0x16,0x1f,0x04,0x0d,
		0xea,0xe3,0xf8,0xf1,0xce,0xc7,0xdc,0xd5,0xa2,0xab,0xb0,0xb9,0x86,0x8f,0x94,0x9d,
		0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
		0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
		0xf4,0xfd,0xe6,0xef,0xd0,0xd9,0xc2,0xcb,0xbc,0xb5,0xae,0xa7,0x98,0x91,0x8a,0x83,
		0x64,0x6d,0x76,0x7f,0x40,0x49,0x52,0x5b,0x2c,0x25,0x3e,0x37,0x08,0x01,0x1a,0x13,
		0xc9,0xc0,0xdb,0xd2,0xed,0xe4,0xff,0xf6,0x81,0x88,0x93,0x9a,0xa5,0xac,0xb7,0xbe,
		0x59,0x50,0x4b,0x42,0x7d,0x74,0x6f,0x66,0x11,0x18,0x03,0x0a,0x35,0x3c,0x27,0x2e,
		0x8e,0x87,0x9c,0x95,0xaa,0xa3,0xb8,0xb1,0xc6,0xcf,0xd4,0xdd,0xe2,0xeb,0xf0,0xf9,
		0x1e,0x17,0x0c,0x05,0x3a,0x33,0x28,0x21,0x56,0x5f,0x44,0x4d,0x72,0x7b,0x60,0x69,
		0xb3,0xba,0xa1,0xa8,0x97,0x9e,0x85,0x8c,0xfb,0xf2,0xe9,0xe0,0xdf,0xd6,0xcd,0xc4,
		0x23,0x2a,0x31,0x38,0x07,0x0e,0x15,0x1c,0x6b,0x62,0x79,0x70,0x4f,0x46,0x5d,0x54
	};
	
	// Inverse MixRows
	//   4 175  14 164 194 194 203  62
	//   4  AF   E  A4  C2  C2  CB  3E
	private static final int[] XTIMES_AF = { 
		0x00,0xaf,0x43,0xec,0x86,0x29,0xc5,0x6a,0x11,0xbe,0x52,0xfd,0x97,0x38,0xd4,0x7b,
		0x22,0x8d,0x61,0xce,0xa4,0x0b,0xe7,0x48,0x33,0x9c,0x70,0xdf,0xb5,0x1a,0xf6,0x59,
		0x44,0xeb,0x07,0xa8,0xc2,0x6d,0x81,0x2e,0x55,0xfa,0x16,0xb9,0xd3,0x7c,0x90,0x3f,
		0x66,0xc9,0x25,0x8a,0xe0,0x4f,0xa3,0x0c,0x77,0xd8,0x34,0x9b,0xf1,0x5e,0xb2,0x1d,
		0x88,0x27,0xcb,0x64,0x0e,0xa1,0x4d,0xe2,0x99,0x36,0xda,0x75,0x1f,0xb0,0x5c,0xf3,
		0xaa,0x05,0xe9,0x46,0x2c,0x83,0x6f,0xc0,0xbb,0x14,0xf8,0x57,0x3d,0x92,0x7e,0xd1,
		0xcc,0x63,0x8f,0x20,0x4a,0xe5,0x09,0xa6,0xdd,0x72,0x9e,0x31,0x5b,0xf4,0x18,0xb7,
		0xee,0x41,0xad,0x02,0x68,0xc7,0x2b,0x84,0xff,0x50,0xbc,0x13,0x79,0xd6,0x3a,0x95,
		0x0d,0xa2,0x4e,0xe1,0x8b,0x24,0xc8,0x67,0x1c,0xb3,0x5f,0xf0,0x9a,0x35,0xd9,0x76,
		0x2f,0x80,0x6c,0xc3,0xa9,0x06,0xea,0x45,0x3e,0x91,0x7d,0xd2,0xb8,0x17,0xfb,0x54,
		0x49,0xe6,0x0a,0xa5,0xcf,0x60,0x8c,0x23,0x58,0xf7,0x1b,0xb4,0xde,0x71,0x9d,0x32,
		0x6b,0xc4,0x28,0x87,0xed,0x42,0xae,0x01,0x7a,0xd5,0x39,0x96,0xfc,0x53,0xbf,0x10,
		0x85,0x2a,0xc6,0x69,0x03,0xac,0x40,0xef,0x94,0x3b,0xd7,0x78,0x12,0xbd,0x51,0xfe,
		0xa7,0x08,0xe4,0x4b,0x21,0x8e,0x62,0xcd,0xb6,0x19,0xf5,0x5a,0x30,0x9f,0x73,0xdc,
		0xc1,0x6e,0x82,0x2d,0x47,0xe8,0x04,0xab,0xd0,0x7f,0x93,0x3c,0x56,0xf9,0x15,0xba,
		0xe3,0x4c,0xa0,0x0f,0x65,0xca,0x26,0x89,0xf2,0x5d,0xb1,0x1e,0x74,0xdb,0x37,0x98
	};
	private static final int[] XTIMES_0E = { 
		0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
		0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
		0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,
		0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,
		0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d,0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,
		0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,
		0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
		0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
		0x53,0x5d,0x4f,0x41,0x6b,0x65,0x77,0x79,0x23,0x2d,0x3f,0x31,0x1b,0x15,0x07,0x09,
		0xb3,0xbd,0xaf,0xa1,0x8b,0x85,0x97,0x99,0xc3,0xcd,0xdf,0xd1,0xfb,0xf5,0xe7,0xe9,
		0x8e,0x80,0x92,0x9c,0xb6,0xb8,0xaa,0xa4,0xfe,0xf0,0xe2,0xec,0xc6,0xc8,0xda,0xd4,
		0x6e,0x60,0x72,0x7c,0x56,0x58,0x4a,0x44,0x1e,0x10,0x02,0x0c,0x26,0x28,0x3a,0x34,
		0xf4,0xfa,0xe8,0xe6,0xcc,0xc2,0xd0,0xde,0x84,0x8a,0x98,0x96,0xbc,0xb2,0xa0,0xae,
		0x14,0x1a,0x08,0x06,0x2c,0x22,0x30,0x3e,0x64,0x6a,0x78,0x76,0x5c,0x52,0x40,0x4e,
		0x29,0x27,0x35,0x3b,0x11,0x1f,0x0d,0x03,0x59,0x57,0x45,0x4b,0x61,0x6f,0x7d,0x73,
		0xc9,0xc7,0xd5,0xdb,0xf1,0xff,0xed,0xe3,0xb9,0xb7,0xa5,0xab,0x81,0x8f,0x9d,0x93
	};
	private static final int[] XTIMES_A4 = { 
		0x00,0xa4,0x55,0xf1,0xaa,0x0e,0xff,0x5b,0x49,0xed,0x1c,0xb8,0xe3,0x47,0xb6,0x12,
		0x92,0x36,0xc7,0x63,0x38,0x9c,0x6d,0xc9,0xdb,0x7f,0x8e,0x2a,0x71,0xd5,0x24,0x80,
		0x39,0x9d,0x6c,0xc8,0x93,0x37,0xc6,0x62,0x70,0xd4,0x25,0x81,0xda,0x7e,0x8f,0x2b,
		0xab,0x0f,0xfe,0x5a,0x01,0xa5,0x54,0xf0,0xe2,0x46,0xb7,0x13,0x48,0xec,0x1d,0xb9,
		0x72,0xd6,0x27,0x83,0xd8,0x7c,0x8d,0x29,0x3b,0x9f,0x6e,0xca,0x91,0x35,0xc4,0x60,
		0xe0,0x44,0xb5,0x11,0x4a,0xee,0x1f,0xbb,0xa9,0x0d,0xfc,0x58,0x03,0xa7,0x56,0xf2,
		0x4b,0xef,0x1e,0xba,0xe1,0x45,0xb4,0x10,0x02,0xa6,0x57,0xf3,0xa8,0x0c,0xfd,0x59,
		0xd9,0x7d,0x8c,0x28,0x73,0xd7,0x26,0x82,0x90,0x34,0xc5,0x61,0x3a,0x9e,0x6f,0xcb,
		0xe4,0x40,0xb1,0x15,0x4e,0xea,0x1b,0xbf,0xad,0x09,0xf8,0x5c,0x07,0xa3,0x52,0xf6,
		0x76,0xd2,0x23,0x87,0xdc,0x78,0x89,0x2d,0x3f,0x9b,0x6a,0xce,0x95,0x31,0xc0,0x64,
		0xdd,0x79,0x88,0x2c,0x77,0xd3,0x22,0x86,0x94,0x30,0xc1,0x65,0x3e,0x9a,0x6b,0xcf,
		0x4f,0xeb,0x1a,0xbe,0xe5,0x41,0xb0,0x14,0x06,0xa2,0x53,0xf7,0xac,0x08,0xf9,0x5d,
		0x96,0x32,0xc3,0x67,0x3c,0x98,0x69,0xcd,0xdf,0x7b,0x8a,0x2e,0x75,0xd1,0x20,0x84,
		0x04,0xa0,0x51,0xf5,0xae,0x0a,0xfb,0x5f,0x4d,0xe9,0x18,0xbc,0xe7,0x43,0xb2,0x16,
		0xaf,0x0b,0xfa,0x5e,0x05,0xa1,0x50,0xf4,0xe6,0x42,0xb3,0x17,0x4c,0xe8,0x19,0xbd,
		0x3d,0x99,0x68,0xcc,0x97,0x33,0xc2,0x66,0x74,0xd0,0x21,0x85,0xde,0x7a,0x8b,0x2f
	};
	private static final int[] XTIMES_C2 = { 
		0x00,0xc2,0x99,0x5b,0x2f,0xed,0xb6,0x74,0x5e,0x9c,0xc7,0x05,0x71,0xb3,0xe8,0x2a,
		0xbc,0x7e,0x25,0xe7,0x93,0x51,0x0a,0xc8,0xe2,0x20,0x7b,0xb9,0xcd,0x0f,0x54,0x96,
		0x65,0xa7,0xfc,0x3e,0x4a,0x88,0xd3,0x11,0x3b,0xf9,0xa2,0x60,0x14,0xd6,0x8d,0x4f,
		0xd9,0x1b,0x40,0x82,0xf6,0x34,0x6f,0xad,0x87,0x45,0x1e,0xdc,0xa8,0x6a,0x31,0xf3,
		0xca,0x08,0x53,0x91,0xe5,0x27,0x7c,0xbe,0x94,0x56,0x0d,0xcf,0xbb,0x79,0x22,0xe0,
		0x76,0xb4,0xef,0x2d,0x59,0x9b,0xc0,0x02,0x28,0xea,0xb1,0x73,0x07,0xc5,0x9e,0x5c,
		0xaf,0x6d,0x36,0xf4,0x80,0x42,0x19,0xdb,0xf1,0x33,0x68,0xaa,0xde,0x1c,0x47,0x85,
		0x13,0xd1,0x8a,0x48,0x3c,0xfe,0xa5,0x67,0x4d,0x8f,0xd4,0x16,0x62,0xa0,0xfb,0x39,
		0x89,0x4b,0x10,0xd2,0xa6,0x64,0x3f,0xfd,0xd7,0x15,0x4e,0x8c,0xf8,0x3a,0x61,0xa3,
		0x35,0xf7,0xac,0x6e,0x1a,0xd8,0x83,0x41,0x6b,0xa9,0xf2,0x30,0x44,0x86,0xdd,0x1f,
		0xec,0x2e,0x75,0xb7,0xc3,0x01,0x5a,0x98,0xb2,0x70,0x2b,0xe9,0x9d,0x5f,0x04,0xc6,
		0x50,0x92,0xc9,0x0b,0x7f,0xbd,0xe6,0x24,0x0e,0xcc,0x97,0x55,0x21,0xe3,0xb8,0x7a,
		0x43,0x81,0xda,0x18,0x6c,0xae,0xf5,0x37,0x1d,0xdf,0x84,0x46,0x32,0xf0,0xab,0x69,
		0xff,0x3d,0x66,0xa4,0xd0,0x12,0x49,0x8b,0xa1,0x63,0x38,0xfa,0x8e,0x4c,0x17,0xd5,
		0x26,0xe4,0xbf,0x7d,0x09,0xcb,0x90,0x52,0x78,0xba,0xe1,0x23,0x57,0x95,0xce,0x0c,
		0x9a,0x58,0x03,0xc1,0xb5,0x77,0x2c,0xee,0xc4,0x06,0x5d,0x9f,0xeb,0x29,0x72,0xb0
	};
	private static final int[] XTIMES_CB = { 
		0x00,0xcb,0x8b,0x40,0x0b,0xc0,0x80,0x4b,0x16,0xdd,0x9d,0x56,0x1d,0xd6,0x96,0x5d,
		0x2c,0xe7,0xa7,0x6c,0x27,0xec,0xac,0x67,0x3a,0xf1,0xb1,0x7a,0x31,0xfa,0xba,0x71,
		0x58,0x93,0xd3,0x18,0x53,0x98,0xd8,0x13,0x4e,0x85,0xc5,0x0e,0x45,0x8e,0xce,0x05,
		0x74,0xbf,0xff,0x34,0x7f,0xb4,0xf4,0x3f,0x62,0xa9,0xe9,0x22,0x69,0xa2,0xe2,0x29,
		0xb0,0x7b,0x3b,0xf0,0xbb,0x70,0x30,0xfb,0xa6,0x6d,0x2d,0xe6,0xad,0x66,0x26,0xed,
		0x9c,0x57,0x17,0xdc,0x97,0x5c,0x1c,0xd7,0x8a,0x41,0x01,0xca,0x81,0x4a,0x0a,0xc1,
		0xe8,0x23,0x63,0xa8,0xe3,0x28,0x68,0xa3,0xfe,0x35,0x75,0xbe,0xf5,0x3e,0x7e,0xb5,
		0xc4,0x0f,0x4f,0x84,0xcf,0x04,0x44,0x8f,0xd2,0x19,0x59,0x92,0xd9,0x12,0x52,0x99,
		0x7d,0xb6,0xf6,0x3d,0x76,0xbd,0xfd,0x36,0x6b,0xa0,0xe0,0x2b,0x60,0xab,0xeb,0x20,
		0x51,0x9a,0xda,0x11,0x5a,0x91,0xd1,0x1a,0x47,0x8c,0xcc,0x07,0x4c,0x87,0xc7,0x0c,
		0x25,0xee,0xae,0x65,0x2e,0xe5,0xa5,0x6e,0x33,0xf8,0xb8,0x73,0x38,0xf3,0xb3,0x78,
		0x09,0xc2,0x82,0x49,0x02,0xc9,0x89,0x42,0x1f,0xd4,0x94,0x5f,0x14,0xdf,0x9f,0x54,
		0xcd,0x06,0x46,0x8d,0xc6,0x0d,0x4d,0x86,0xdb,0x10,0x50,0x9b,0xd0,0x1b,0x5b,0x90,
		0xe1,0x2a,0x6a,0xa1,0xea,0x21,0x61,0xaa,0xf7,0x3c,0x7c,0xb7,0xfc,0x37,0x77,0xbc,
		0x95,0x5e,0x1e,0xd5,0x9e,0x55,0x15,0xde,0x83,0x48,0x08,0xc3,0x88,0x43,0x03,0xc8,
		0xb9,0x72,0x32,0xf9,0xb2,0x79,0x39,0xf2,0xaf,0x64,0x24,0xef,0xa4,0x6f,0x2f,0xe4
	};
	private static final int[] XTIMES_3E = { 
		0x00,0x3e,0x7c,0x42,0xf8,0xc6,0x84,0xba,0xed,0xd3,0x91,0xaf,0x15,0x2b,0x69,0x57,
		0xc7,0xf9,0xbb,0x85,0x3f,0x01,0x43,0x7d,0x2a,0x14,0x56,0x68,0xd2,0xec,0xae,0x90,
		0x93,0xad,0xef,0xd1,0x6b,0x55,0x17,0x29,0x7e,0x40,0x02,0x3c,0x86,0xb8,0xfa,0xc4,
		0x54,0x6a,0x28,0x16,0xac,0x92,0xd0,0xee,0xb9,0x87,0xc5,0xfb,0x41,0x7f,0x3d,0x03,
		0x3b,0x05,0x47,0x79,0xc3,0xfd,0xbf,0x81,0xd6,0xe8,0xaa,0x94,0x2e,0x10,0x52,0x6c,
		0xfc,0xc2,0x80,0xbe,0x04,0x3a,0x78,0x46,0x11,0x2f,0x6d,0x53,0xe9,0xd7,0x95,0xab,
		0xa8,0x96,0xd4,0xea,0x50,0x6e,0x2c,0x12,0x45,0x7b,0x39,0x07,0xbd,0x83,0xc1,0xff,
		0x6f,0x51,0x13,0x2d,0x97,0xa9,0xeb,0xd5,0x82,0xbc,0xfe,0xc0,0x7a,0x44,0x06,0x38,
		0x76,0x48,0x0a,0x34,0x8e,0xb0,0xf2,0xcc,0x9b,0xa5,0xe7,0xd9,0x63,0x5d,0x1f,0x21,
		0xb1,0x8f,0xcd,0xf3,0x49,0x77,0x35,0x0b,0x5c,0x62,0x20,0x1e,0xa4,0x9a,0xd8,0xe6,
		0xe5,0xdb,0x99,0xa7,0x1d,0x23,0x61,0x5f,0x08,0x36,0x74,0x4a,0xf0,0xce,0x8c,0xb2,
		0x22,0x1c,0x5e,0x60,0xda,0xe4,0xa6,0x98,0xcf,0xf1,0xb3,0x8d,0x37,0x09,0x4b,0x75,
		0x4d,0x73,0x31,0x0f,0xb5,0x8b,0xc9,0xf7,0xa0,0x9e,0xdc,0xe2,0x58,0x66,0x24,0x1a,
		0x8a,0xb4,0xf6,0xc8,0x72,0x4c,0x0e,0x30,0x67,0x59,0x1b,0x25,0x9f,0xa1,0xe3,0xdd,
		0xde,0xe0,0xa2,0x9c,0x26,0x18,0x5a,0x64,0x33,0x0d,0x4f,0x71,0xcb,0xf5,0xb7,0x89,
		0x19,0x27,0x65,0x5b,0xe1,0xdf,0x9d,0xa3,0xf4,0xca,0x88,0xb6,0x0c,0x32,0x70,0x4e
	};
	
	public WhirlpoolCipher() {
		this.name = "WhirlpoolCipher";
		this.numRounds = NUM_ROUNDS;
		this.keySize = NUM_BYTES_IN_512_BIT;
		this.stateSize = NUM_BYTES_IN_512_BIT;
	}
	
	public boolean canInvertKeySchedule() {
		return true;
	}
	
	public ByteArray computeExpandedKey(ByteArray keyPart, int round) {
		secretKey = new ByteArray((numRounds + 1) * stateSize);
		secretKey.copyBytes(keyPart, 0, round * stateSize, stateSize);
		
		if (round <= numRounds) {
			secretKey = expandKeyForwards(secretKey, keyPart, round + 1);
		}
		
		if (round > 0) {
			secretKey = expandKeyBackwards(secretKey, keyPart, round - 1);
		}
		
		return secretKey;
	}
	
	public ByteArray decryptRounds(ByteArray block, int fromRound, int toRound) {
		ByteArray state = block.clone();
		
		for (int round = toRound; round >= fromRound; round--) {
			state = addRoundKey(round, state);
            state = invertMixRows(state);
            state = invertShiftColumns(state);
			state = invertSubBytes(state);
		}
		
		return state;
	}
	
	public ByteArray encryptRounds(ByteArray block, int fromRound, int toRound) {
		ByteArray state = block.clone();
		
		for (int round = fromRound; round <= toRound; round++) {
			state = subBytes(state);
			state = shiftColumns(state);
            state = mixRows(state);
            state = addRoundKey(round, state);
		}
		
		this.state = state;
		return this.state;
	}
	
	public int getNumActiveComponentsInKeySchedule() {
		return numRounds * stateSize;
	}
	
	public ByteArray getRoundKey(int round) {
		int from = round * stateSize;
		int to = from + stateSize;
		return secretKey.splice(from, to);
	}
	
	public boolean injectsKeyAtRoundEnd(int round) {
		return true;
	}
	
	public boolean operatesColumnwise() {
		return false;
	}
	
	public void setKey(ByteArray key) {
		secretKey = expandKey(key.clone());
	}
	
	private ByteArray expandKey(ByteArray key) {
		secretKey = new ByteArray((numRounds + 1) * stateSize);
		secretKey.copyBytes(key);
		secretKey = expandKeyForwards(secretKey, key, 1);
		return secretKey;
	}
	
	private ByteArray expandKeyBackwards(ByteArray secretKey, ByteArray key, int round) {
		ByteArray roundKey = key.clone();
		
		for (; round >= 0; round--) {
			roundKey = addRoundConstant(roundKey, round + 1);
			roundKey = invertMixRows(roundKey);
			roundKey = invertShiftColumns(roundKey);
			roundKey = invertSubBytes(roundKey);
			
			secretKey.copyBytes(roundKey, 0, round * stateSize);
		}
		
		return secretKey;
	}
	
	private ByteArray expandKeyForwards(ByteArray secretKey, ByteArray key, int round) {
		ByteArray roundKey = key.clone();
		
		for (; round <= numRounds; round++) {
			roundKey = subBytes(roundKey);
			roundKey = shiftColumns(roundKey);
			roundKey = mixRows(roundKey);
			roundKey = addRoundConstant(roundKey, round);
			
			secretKey.copyBytes(roundKey, 0, round * stateSize);
		}
		
		return secretKey;
	}
	
	public void setExpandedKey(ByteArray expandedKey) {
		secretKey = expandedKey.clone();
	}
	
	private ByteArray addRoundConstant(ByteArray state, int round) {
		int[] roundConstants = getRoundConstants(round);
		
		for (int column = 0; column < NUM_COLUMNS_IN_STATE; column++) {
			// Round constants are only applied to the initial row
			state.set(column, state.get(column) ^ roundConstants[column]);
		}
		
		return state;
	}
	
	private ByteArray subBytes(ByteArray state) {
		for (int index = 0; index < stateSize; index++) {
			state.set(index, SBOX[state.get(index)]);
		}
		
		return state;
	}
	
	private int[] getRoundConstants(int round) {
		return ROUND_CONSTANTS[round - 1];
	}
	
	private ByteArray invertSubBytes(ByteArray state) {
		for (int index = 0; index < stateSize; index++) {
			state.set(index, INVERSE_SBOX[state.get(index)]);
		}
		
		return state;
	}
	
	private ByteArray invertShiftColumns(ByteArray state) {
		ByteArray newstate = state.clone();
		int destination, source;
		
		for (int row = 0; row < NUM_ROWS_IN_STATE; row++) {
			for (int column = 0; column < NUM_COLUMNS_IN_STATE; column++) {
				source = NUM_COLUMNS_IN_STATE * row + column;
				destination = NUM_COLUMNS_IN_STATE * ((row - column + NUM_COLUMNS_IN_STATE) % NUM_COLUMNS_IN_STATE) + column;
				newstate.set(destination, state.get(source)); 
			}
		}
		
		return newstate;
	}
	
	private ByteArray invertMixRows(ByteArray state) {
		short[] oldState = state.getArray();
		ByteArray newState = new ByteArray(stateSize);
		
		//    4  AF  0E  A4  C2  C2  CB  3E
		//   3E   4  AF  0E  A4  C2  C2  CB
		//   CB  3E   4  AF  0E  A4  C2  C2
		//   C2  CB  3E   4  AF  0E  A4  C2
		//   C2  C2  CB  3E   4  AF  0E  A4
		//   A4  C2  C2  CB  3E   4  AF  0E
		//   0E  A4  C2  C2  CB  3E   4  AF
		//   AF  0E  A4  C2  C2  CB  3E   4
		
		int value = 0;
		int offset = 0;
		
		for (int row = 0; row < NUM_ROWS_IN_STATE; row++) {
			offset = row * NUM_COLUMNS_IN_STATE;
			
			for (int column = 0; column < NUM_COLUMNS_IN_STATE; column++) {
				value = XTIMES_04[oldState[offset + (column % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_3E[oldState[offset + ((column + 1) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_CB[oldState[offset + ((column + 2) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_C2[oldState[offset + ((column + 3) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_C2[oldState[offset + ((column + 4) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_A4[oldState[offset + ((column + 5) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_0E[oldState[offset + ((column + 6) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_AF[oldState[offset + ((column + 7) % NUM_COLUMNS_IN_STATE)]];
				
				newState.set(offset + column, value);
			}
		}
		
		return newState;
	}
	
	private ByteArray mixRows(ByteArray state) {
		short[] oldState = state.getArray();
		ByteArray newState = new ByteArray(stateSize);
		
		//   1   1   4   1   8   5   2   9
		//   9   1   1   4   1   8   5   2
		//   2   9   1   1   4   1   8   5
		//   5   2   9   1   1   4   1   8
		//   8   5   2   9   1   1   4   1
		//   1   8   5   2   9   1   1   4
		//   4   1   8   5   2   9   1   1
		//   1   4   1   8   5   2   9   1
		
		int value = 0;
		int offset = 0;
		
		for (int row = 0; row < NUM_ROWS_IN_STATE; row++) {
			offset = row * NUM_COLUMNS_IN_STATE;
			
			for (int column = 0; column < NUM_COLUMNS_IN_STATE; column++) {
				value = oldState[offset + (column % NUM_COLUMNS_IN_STATE)] ^ 
					XTIMES_09[oldState[offset + ((column + 1) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_02[oldState[offset + ((column + 2) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_05[oldState[offset + ((column + 3) % NUM_COLUMNS_IN_STATE)]] ^ 
					XTIMES_08[oldState[offset + ((column + 4) % NUM_COLUMNS_IN_STATE)]] ^ 
							 oldState[offset + ((column + 5) % NUM_COLUMNS_IN_STATE)] ^ 
					XTIMES_04[oldState[offset + ((column + 6) % NUM_COLUMNS_IN_STATE)]] ^ 
							 oldState[offset + ((column + 7) % NUM_COLUMNS_IN_STATE)];
				
				newState.set(offset + column, value);
			}
		}
		
		return newState;
	}
	
	private ByteArray shiftColumns(ByteArray state) {
		ByteArray newstate = state.clone();
		int destination, source;
		
		for (int row = 0; row < NUM_ROWS_IN_STATE; row++) {
			for (int column = 0; column < NUM_COLUMNS_IN_STATE; column++) {
				destination = NUM_COLUMNS_IN_STATE * row + column;
				source = NUM_COLUMNS_IN_STATE * ((row - column + NUM_COLUMNS_IN_STATE) % NUM_COLUMNS_IN_STATE) + column;
				newstate.set(destination, state.get(source)); 
			}
		}
		
		return newstate;
	}
	
}
