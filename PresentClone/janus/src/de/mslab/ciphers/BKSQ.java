package de.mslab.ciphers;

import de.mslab.core.ByteArray;
import de.mslab.errors.InvalidKeySizeError;

/**
 * Implements the BKSQ block cipher, designed 2000 by Daemen and Rijmen. 
 * 
 */
abstract class BKSQ extends AbstractRoundBasedBlockCipher {
	
	public static final int NUM_COLUMNS_IN_STATE = 4;
	public static final int NUM_ROWS_IN_STATE = 3;
	public static final int NUM_BYTES_IN_STATE = NUM_COLUMNS_IN_STATE * NUM_ROWS_IN_STATE;
	
	protected static final int[] INVERSE_SBOX = AES.INVERSE_SBOX;
	protected static final int[] RCON = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63};
	protected static final int[] SBOX = AES.SBOX;
	
	private static final int[] XTIMES_02 = { 
		0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
		0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
		0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
		0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
		0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
		0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
		0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
		0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
		0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
		0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
		0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
		0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
		0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
		0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
		0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
		0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
	};
	private static final int[] XTIMES_03 = { 
		0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
		0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
		0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
		0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
		0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
		0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
		0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
		0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
		0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
		0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
		0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
		0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
		0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
		0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
		0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
		0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
	};
	private static final int[] XTIMES_F6 = { 
		0x00,0xf6,0xf7,0x01,0xf5,0x03,0x02,0xf4,0xf1,0x07,0x06,0xf0,0x04,0xf2,0xf3,0x05,
		0xf9,0x0f,0x0e,0xf8,0x0c,0xfa,0xfb,0x0d,0x08,0xfe,0xff,0x09,0xfd,0x0b,0x0a,0xfc,
		0xe9,0x1f,0x1e,0xe8,0x1c,0xea,0xeb,0x1d,0x18,0xee,0xef,0x19,0xed,0x1b,0x1a,0xec,
		0x10,0xe6,0xe7,0x11,0xe5,0x13,0x12,0xe4,0xe1,0x17,0x16,0xe0,0x14,0xe2,0xe3,0x15,
		0xc9,0x3f,0x3e,0xc8,0x3c,0xca,0xcb,0x3d,0x38,0xce,0xcf,0x39,0xcd,0x3b,0x3a,0xcc,
		0x30,0xc6,0xc7,0x31,0xc5,0x33,0x32,0xc4,0xc1,0x37,0x36,0xc0,0x34,0xc2,0xc3,0x35,
		0x20,0xd6,0xd7,0x21,0xd5,0x23,0x22,0xd4,0xd1,0x27,0x26,0xd0,0x24,0xd2,0xd3,0x25,
		0xd9,0x2f,0x2e,0xd8,0x2c,0xda,0xdb,0x2d,0x28,0xde,0xdf,0x29,0xdd,0x2b,0x2a,0xdc,
		0x89,0x7f,0x7e,0x88,0x7c,0x8a,0x8b,0x7d,0x78,0x8e,0x8f,0x79,0x8d,0x7b,0x7a,0x8c,
		0x70,0x86,0x87,0x71,0x85,0x73,0x72,0x84,0x81,0x77,0x76,0x80,0x74,0x82,0x83,0x75,
		0x60,0x96,0x97,0x61,0x95,0x63,0x62,0x94,0x91,0x67,0x66,0x90,0x64,0x92,0x93,0x65,
		0x99,0x6f,0x6e,0x98,0x6c,0x9a,0x9b,0x6d,0x68,0x9e,0x9f,0x69,0x9d,0x6b,0x6a,0x9c,
		0x40,0xb6,0xb7,0x41,0xb5,0x43,0x42,0xb4,0xb1,0x47,0x46,0xb0,0x44,0xb2,0xb3,0x45,
		0xb9,0x4f,0x4e,0xb8,0x4c,0xba,0xbb,0x4d,0x48,0xbe,0xbf,0x49,0xbd,0x4b,0x4a,0xbc,
		0xa9,0x5f,0x5e,0xa8,0x5c,0xaa,0xab,0x5d,0x58,0xae,0xaf,0x59,0xad,0x5b,0x5a,0xac,
		0x50,0xa6,0xa7,0x51,0xa5,0x53,0x52,0xa4,0xa1,0x57,0x56,0xa0,0x54,0xa2,0xa3,0x55
	};
	private static final int[] XTIMES_F7 = { 
		0x00,0xf7,0xf5,0x02,0xf1,0x06,0x04,0xf3,0xf9,0x0e,0x0c,0xfb,0x08,0xff,0xfd,0x0a,
		0xe9,0x1e,0x1c,0xeb,0x18,0xef,0xed,0x1a,0x10,0xe7,0xe5,0x12,0xe1,0x16,0x14,0xe3,
		0xc9,0x3e,0x3c,0xcb,0x38,0xcf,0xcd,0x3a,0x30,0xc7,0xc5,0x32,0xc1,0x36,0x34,0xc3,
		0x20,0xd7,0xd5,0x22,0xd1,0x26,0x24,0xd3,0xd9,0x2e,0x2c,0xdb,0x28,0xdf,0xdd,0x2a,
		0x89,0x7e,0x7c,0x8b,0x78,0x8f,0x8d,0x7a,0x70,0x87,0x85,0x72,0x81,0x76,0x74,0x83,
		0x60,0x97,0x95,0x62,0x91,0x66,0x64,0x93,0x99,0x6e,0x6c,0x9b,0x68,0x9f,0x9d,0x6a,
		0x40,0xb7,0xb5,0x42,0xb1,0x46,0x44,0xb3,0xb9,0x4e,0x4c,0xbb,0x48,0xbf,0xbd,0x4a,
		0xa9,0x5e,0x5c,0xab,0x58,0xaf,0xad,0x5a,0x50,0xa7,0xa5,0x52,0xa1,0x56,0x54,0xa3,
		0x09,0xfe,0xfc,0x0b,0xf8,0x0f,0x0d,0xfa,0xf0,0x07,0x05,0xf2,0x01,0xf6,0xf4,0x03,
		0xe0,0x17,0x15,0xe2,0x11,0xe6,0xe4,0x13,0x19,0xee,0xec,0x1b,0xe8,0x1f,0x1d,0xea,
		0xc0,0x37,0x35,0xc2,0x31,0xc6,0xc4,0x33,0x39,0xce,0xcc,0x3b,0xc8,0x3f,0x3d,0xca,
		0x29,0xde,0xdc,0x2b,0xd8,0x2f,0x2d,0xda,0xd0,0x27,0x25,0xd2,0x21,0xd6,0xd4,0x23,
		0x80,0x77,0x75,0x82,0x71,0x86,0x84,0x73,0x79,0x8e,0x8c,0x7b,0x88,0x7f,0x7d,0x8a,
		0x69,0x9e,0x9c,0x6b,0x98,0x6f,0x6d,0x9a,0x90,0x67,0x65,0x92,0x61,0x96,0x94,0x63,
		0x49,0xbe,0xbc,0x4b,0xb8,0x4f,0x4d,0xba,0xb0,0x47,0x45,0xb2,0x41,0xb6,0xb4,0x43,
		0xa0,0x57,0x55,0xa2,0x51,0xa6,0xa4,0x53,0x59,0xae,0xac,0x5b,0xa8,0x5f,0x5d,0xaa
	};

	public boolean canInvertKeySchedule() {
		return true;
	}
	
	public ByteArray computeExpandedKey(ByteArray keyPart, int round) {
		checkKeySize(keyPart.length());
		
		// + 1 to store subkey for round 0.
		// We need all bytes of the secret key to invert the key schedule in the 
		// expandKeyColumnBackwards() method.
		ByteArray expandedKey = new ByteArray((numRounds + 1) * stateSize);
		int startIndex = round * stateSize;
		
		if (startIndex + keySize > expandedKey.length()) {
			startIndex = expandedKey.length() - keySize;
		}
		
		expandedKey.copyBytes(keyPart, 0, startIndex);
		
		int startColumn = startIndex / NUM_ROWS_IN_STATE;
		int nextColumn = startColumn + keyPart.length() / NUM_ROWS_IN_STATE;
		int endColumn = (numRounds + 1) * NUM_COLUMNS_IN_STATE; 
		
		for (int columnIndex = nextColumn; columnIndex < endColumn; columnIndex++) {
			expandKeyColumnForwards(expandedKey, columnIndex);
		}
		
		for (int columnIndex = startColumn - 1; columnIndex >= 0; columnIndex--) {
			expandKeyColumnBackwards(expandedKey, columnIndex);
		}
		
		return expandedKey.splice(0, (numRounds + 1) * stateSize);
	}
	
	public ByteArray decryptRounds(ByteArray block, int fromRound, int toRound) {
		state = block.clone();
		
		for (int round = toRound; round >= fromRound; round--) {
			state = addRoundKey(round, state);
			state = invertPi(state);
			state = invertGamma(state);
			state = invertTheta(state);
		}
		
		if (fromRound == 1) {
			state = addRoundKey(0, state);
			state = theta(state);
		}
		
		return state;
	}
	
	public ByteArray encryptRounds(ByteArray block, int fromRound, int toRound) {
		state = block.clone();
		
		if (fromRound == 1) {
			state = invertTheta(state);
			state = addRoundKey(0, state);
		}
		
		for (int round = fromRound; round <= toRound; round++) {
			state = theta(state);
			state = gamma(state);
			state = pi(state);
			state = addRoundKey(round, state);
		}
		
		return state;
	}
	
	public ByteArray getRoundKey(int round) {
		int from = round * NUM_BYTES_IN_STATE;
		int to = from + NUM_BYTES_IN_STATE;
		return this.secretKey.splice(from, to);
	}

	public boolean injectsKeyAtRoundEnd(int round) {
		return true;
	}
	
	public void setKey(ByteArray key) throws InvalidKeySizeError {
		if (key.length() != keySize) {
			int[] correctKeySizes = { keySize };
			throw new InvalidKeySizeError(key.length(), correctKeySizes);
		}
		
		this.secretKey = expandKey(key);
	}
	
	public void setExpandedKey(ByteArray expandedKey) throws InvalidKeySizeError {
		checkExpandedKeySize(expandedKey.length());
		this.secretKey = expandedKey.clone();
	}
	
	protected abstract void expandKeyColumnBackwards(ByteArray key, int columnIndex);
	protected abstract void expandKeyColumnForwards(ByteArray key, int columnIndex);
	
	private ByteArray expandKey(ByteArray key) {
		secretKey = new ByteArray(getValidExpandedKeySize());
		secretKey.copyBytes(key);
		
		int startColumn = key.length() / NUM_ROWS_IN_STATE;
		int endColumn = (numRounds + 1) * NUM_COLUMNS_IN_STATE;
		
		for (int columnIndex = startColumn; columnIndex < endColumn; columnIndex++) {
			expandKeyColumnForwards(secretKey, columnIndex);
		}
		
		return secretKey;
	}
	
	private int getValidExpandedKeySize() {
		return (numRounds + 1) * stateSize;
	}

	private void checkKeySize(int length) {
		if (length != keySize) {
			throw new InvalidKeySizeError(length);
		}
	}
	
	private void checkExpandedKeySize(int length) {
		if (length != (numRounds + 1) * stateSize) {
			throw new InvalidKeySizeError(length);
		}
	}
	
	private ByteArray gamma(ByteArray state) {
		for (int index = 0; index < stateSize; index++) {
			state.set(index, SBOX[state.get(index)]);
		}
		
		return state;
	}
	
	private ByteArray invertGamma(ByteArray state) {
		for (int index = 0; index < stateSize; index++) {
			state.set(index, INVERSE_SBOX[state.get(index)]);
		}
		
		return state;
	}
	
	private ByteArray invertPi(ByteArray state) {
		ByteArray newstate = state.clone();
		
		// 0, 3, 6, 9 	<= 0, 3, 6, 9
		// 1, 4, 7, 10	<= 4, 7, 10, 1
		// 2, 5, 8, 11	<= 8, 11, 2, 5
		
		newstate.set(1, state.get(4));
		newstate.set(4, state.get(7));
		newstate.set(7, state.get(10));
		newstate.set(10, state.get(1));
		
		newstate.set(2, state.get(8));
		newstate.set(5, state.get(11));
		newstate.set(8, state.get(2));
		newstate.set(11, state.get(5));
		
		return newstate;
	}
	
	private ByteArray invertTheta(ByteArray state) {
		ByteArray newState = new ByteArray(stateSize);
		
		newState.set(0, XTIMES_F6[state.get(0)] ^ XTIMES_F7[state.get(1)] ^ XTIMES_F7[state.get(2)]);
		newState.set(1, XTIMES_F7[state.get(0)] ^ XTIMES_F6[state.get(1)] ^ XTIMES_F7[state.get(2)]);
		newState.set(2, XTIMES_F7[state.get(0)] ^ XTIMES_F7[state.get(1)] ^ XTIMES_F6[state.get(2)]);

		newState.set(3, XTIMES_F6[state.get(3)] ^ XTIMES_F7[state.get(4)] ^ XTIMES_F7[state.get(5)]);
		newState.set(4, XTIMES_F7[state.get(3)] ^ XTIMES_F6[state.get(4)] ^ XTIMES_F7[state.get(5)]);
		newState.set(5, XTIMES_F7[state.get(3)] ^ XTIMES_F7[state.get(4)] ^ XTIMES_F6[state.get(5)]);

		newState.set(6, XTIMES_F6[state.get(6)] ^ XTIMES_F7[state.get(7)] ^ XTIMES_F7[state.get(8)]);
		newState.set(7, XTIMES_F7[state.get(6)] ^ XTIMES_F6[state.get(7)] ^ XTIMES_F7[state.get(8)]);
		newState.set(8, XTIMES_F7[state.get(6)] ^ XTIMES_F7[state.get(7)] ^ XTIMES_F6[state.get(8)]);

		newState.set(9, XTIMES_F6[state.get(9)] ^ XTIMES_F7[state.get(10)] ^ XTIMES_F7[state.get(11)]);
		newState.set(10, XTIMES_F7[state.get(9)] ^ XTIMES_F6[state.get(10)] ^ XTIMES_F7[state.get(11)]);
		newState.set(11, XTIMES_F7[state.get(9)] ^ XTIMES_F7[state.get(10)] ^ XTIMES_F6[state.get(11)]);
		
		return newState;
	}
	
	private ByteArray pi(ByteArray state) {
		ByteArray newstate = state.clone();
		
		// 0, 3, 6, 9 	=> 0, 3, 6, 9
		// 1, 4, 7, 10	=> 10, 1, 4, 7
		// 2, 5, 8, 11	=> 8, 11, 2, 5
		
		newstate.set(1, state.get(10));
		newstate.set(4, state.get(1));
		newstate.set(7, state.get(4));
		newstate.set(10, state.get(7));

		newstate.set(2, state.get(8));
		newstate.set(5, state.get(11));
		newstate.set(8, state.get(2));
		newstate.set(11, state.get(5));
		
		return newstate;
	}

	private ByteArray theta(ByteArray state) {
		ByteArray newState = new ByteArray(stateSize);
		
		newState.set(0, XTIMES_03[state.get(0)] ^ XTIMES_02[state.get(1)] ^ XTIMES_02[state.get(2)]);
		newState.set(1, XTIMES_02[state.get(0)] ^ XTIMES_03[state.get(1)] ^ XTIMES_02[state.get(2)]);
		newState.set(2, XTIMES_02[state.get(0)] ^ XTIMES_02[state.get(1)] ^ XTIMES_03[state.get(2)]);

		newState.set(3, XTIMES_03[state.get(3)] ^ XTIMES_02[state.get(4)] ^ XTIMES_02[state.get(5)]);
		newState.set(4, XTIMES_02[state.get(3)] ^ XTIMES_03[state.get(4)] ^ XTIMES_02[state.get(5)]);
		newState.set(5, XTIMES_02[state.get(3)] ^ XTIMES_02[state.get(4)] ^ XTIMES_03[state.get(5)]);

		newState.set(6, XTIMES_03[state.get(6)] ^ XTIMES_02[state.get(7)] ^ XTIMES_02[state.get(8)]);
		newState.set(7, XTIMES_02[state.get(6)] ^ XTIMES_03[state.get(7)] ^ XTIMES_02[state.get(8)]);
		newState.set(8, XTIMES_02[state.get(6)] ^ XTIMES_02[state.get(7)] ^ XTIMES_03[state.get(8)]);

		newState.set(9, XTIMES_03[state.get(9)] ^ XTIMES_02[state.get(10)] ^ XTIMES_02[state.get(11)]);
		newState.set(10, XTIMES_02[state.get(9)] ^ XTIMES_03[state.get(10)] ^ XTIMES_02[state.get(11)]);
		newState.set(11, XTIMES_02[state.get(9)] ^ XTIMES_02[state.get(10)] ^ XTIMES_03[state.get(11)]);
		
		return newState;
	}
	
}
