package de.mslab.ciphers;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import de.mslab.core.ByteArray;

public class ThreeFish256Test extends AbstractCipherTest {
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		cipher = new ThreeFish256();
	}
	
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		cipher = null;
	}
	
	@Test
	public void testDecrypt() {
		int[] tweak = { // 07060504.03020100  0F0E0D0C.0B0A0908 
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08 
		};
		int[] key = { // 17161514.13121110  1F1E1D1C.1B1A1918  27262524.23222120  2F2E2D2C.2B2A2928 
			0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,   
			0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28
		};
		int[] plaintext = { // F8F9FAFB.FCFDFEFF  F0F1F2F3.F4F5F6F7  E8E9EAEB.ECEDEEEF  E0E1E2E3.E4E5E6E7 
			0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 
			0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7
		};
		int[] ciphertext = {
			0xDF, 0x8F, 0xEA, 0x0E, 0xFF, 0x91, 0xD0, 0xE0, 0xD5, 0x0A, 0xD8, 0x2E, 0xE6, 0x92, 0x81, 0xC9, 
			0x76, 0xF4, 0x8D, 0x58, 0x08, 0x5D, 0x86, 0x9D, 0xDF, 0x97, 0x5E, 0x95, 0xB5, 0x56, 0x70, 0x65
		};
		
		ThreeFish256 threefish = (ThreeFish256)cipher;
		threefish.setTweak(new ByteArray(tweak));
		testDecryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testDecryptEmptyValues() {
		int[] tweak = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		int[] key = { 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		};
		int[] plaintext = 	{ 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};
		int[] ciphertext = { 
			0x94, 0xEE, 0xEA, 0x8B, 0x1F, 0x2A, 0xDA, 0x84, 0xAD, 0xF1, 0x03, 0x31, 0x3E, 0xAE, 0x66, 0x70, 
			0x95, 0x24, 0x19, 0xA1, 0xF4, 0xB1, 0x6D, 0x53, 0xD8, 0x3F, 0x13, 0xE6, 0x3C, 0x9F, 0x6B, 0x11
		};
		
		ThreeFish256 threefish = (ThreeFish256)cipher;
		threefish.setTweak(new ByteArray(tweak));
		testDecryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncryptEmptyValues() {
		int[] tweak = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		int[] key = { 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		};
		int[] plaintext = 	{ 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};
		int[] ciphertext = { 
			0x94, 0xEE, 0xEA, 0x8B, 0x1F, 0x2A, 0xDA, 0x84, 0xAD, 0xF1, 0x03, 0x31, 0x3E, 0xAE, 0x66, 0x70, 
			0x95, 0x24, 0x19, 0xA1, 0xF4, 0xB1, 0x6D, 0x53, 0xD8, 0x3F, 0x13, 0xE6, 0x3C, 0x9F, 0x6B, 0x11
		};
		
		ThreeFish256 threefish = (ThreeFish256)cipher;
		threefish.setTweak(new ByteArray(tweak));
		testEncryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncrypt() {
		int[] tweak = { // 07060504.03020100  0F0E0D0C.0B0A0908 
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08 
		};
		int[] key = { // 17161514.13121110  1F1E1D1C.1B1A1918  27262524.23222120  2F2E2D2C.2B2A2928 
			0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,   
			0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28
		};
		int[] plaintext = { // F8F9FAFB.FCFDFEFF  F0F1F2F3.F4F5F6F7  E8E9EAEB.ECEDEEEF  E0E1E2E3.E4E5E6E7 
			0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 
			0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7
		};
		int[] ciphertext = {
			0xDF, 0x8F, 0xEA, 0x0E, 0xFF, 0x91, 0xD0, 0xE0, 0xD5, 0x0A, 0xD8, 0x2E, 0xE6, 0x92, 0x81, 0xC9, 
			0x76, 0xF4, 0x8D, 0x58, 0x08, 0x5D, 0x86, 0x9D, 0xDF, 0x97, 0x5E, 0x95, 0xB5, 0x56, 0x70, 0x65
		};
		
		ThreeFish256 threefish = (ThreeFish256)cipher;
		threefish.setTweak(new ByteArray(tweak));
		testEncryption(key, plaintext, ciphertext);
	}
	
}
