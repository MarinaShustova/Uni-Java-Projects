package de.mslab.ciphers;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import de.mslab.core.ByteArray;

public class ThreeFish512Test extends AbstractCipherTest {
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		cipher = new ThreeFish512();
	}
	
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		cipher = null;
	}

	@Test
	public void testDecrypt() {
		int[] tweak = { // 07060504.03020100  0F0E0D0C.0B0A0908
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08 
		};
		int[] key = { 
			// 17161514.13121110  1F1E1D1C.1B1A1918  27262524.23222120  2F2E2D2C.2B2A2928 
		    // 37363534.33323130  3F3E3D3C.3B3A3938  47464544.43424140  4F4E4D4C.4B4A4948 
			0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,   
			0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 
			0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,   
			0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48
		};
		int[] plaintext = { 
			// F8F9FAFB.FCFDFEFF  F0F1F2F3.F4F5F6F7  E8E9EAEB.ECEDEEEF  E0E1E2E3.E4E5E6E7 
			// D8D9DADB.DCDDDEDF  D0D1D2D3.D4D5D6D7  C8C9CACB.CCCDCECF  C0C1C2C3.C4C5C6C7 
			0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 
			0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 
			0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 
			0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7
		};
		int[] ciphertext = {
			0x2C, 0x5A, 0xD4, 0x26, 0x96, 0x43, 0x04, 0xE3, 0x9A, 0x24, 0x36, 0xD6, 0xD8, 0xCA, 0x01, 0xB4, 
			0xDD, 0x45, 0x6D, 0xB0, 0x0E, 0x33, 0x38, 0x63, 0x79, 0x47, 0x25, 0x97, 0x0E, 0xB9, 0x36, 0x8B, 
			0x04, 0x35, 0x46, 0x99, 0x8D, 0x0A, 0x2A, 0x27, 0x25, 0xA7, 0xC9, 0x18, 0xEA, 0x20, 0x44, 0x78, 
			0x34, 0x62, 0x01, 0xA1, 0xFE, 0xDF, 0x11, 0xAF, 0x3D, 0xAF, 0x1C, 0x5C, 0x3D, 0x67, 0x27, 0x89
		};
		
		((ThreeFish512)cipher).setTweak(new ByteArray(tweak));
		testDecryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncryptEmptyValues() {
		int[] tweak = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		int[] key = { 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};
		int[] plaintext = 	{ 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};
		int[] ciphertext = { 
			0xBC, 0x25, 0x60, 0xEF, 0xC6, 0xBB, 0xA2, 0xB1, 0xE3, 0x36, 0x1F, 0x16, 0x22, 0x38, 0xEB, 0x40, 
			0xFB, 0x86, 0x31, 0xEE, 0x0A, 0xBB, 0xD1, 0x75, 0x7B, 0x94, 0x79, 0xD4, 0xC5, 0x47, 0x9E, 0xD1,  
			0xCF, 0xF0, 0x35, 0x6E, 0x58, 0xF8, 0xC2, 0x7B, 0xB1, 0xB7, 0xB0, 0x84, 0x30, 0xF0, 0xE7, 0xF7, 
			0xE9, 0xA3, 0x80, 0xA5, 0x61, 0x39, 0xAB, 0xF1, 0xBE, 0x7B, 0x6D, 0x4A, 0xA1, 0x1E, 0xB4, 0x7E 
		};
		
		((ThreeFish512)cipher).setTweak(new ByteArray(tweak));
		testEncryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncrypt() {
		int[] tweak = { // 07060504.03020100  0F0E0D0C.0B0A0908
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08 
		};
		int[] key = { 
			// 17161514.13121110  1F1E1D1C.1B1A1918  27262524.23222120  2F2E2D2C.2B2A2928 
		    // 37363534.33323130  3F3E3D3C.3B3A3938  47464544.43424140  4F4E4D4C.4B4A4948 
			0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,   
			0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 
			0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,   
			0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48
		};
		int[] plaintext = { 
			// F8F9FAFB.FCFDFEFF  F0F1F2F3.F4F5F6F7  E8E9EAEB.ECEDEEEF  E0E1E2E3.E4E5E6E7 
			// D8D9DADB.DCDDDEDF  D0D1D2D3.D4D5D6D7  C8C9CACB.CCCDCECF  C0C1C2C3.C4C5C6C7 
			0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 
			0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 
			0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 
			0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7
		};
		int[] ciphertext = {
			0x2C, 0x5A, 0xD4, 0x26, 0x96, 0x43, 0x04, 0xE3, 0x9A, 0x24, 0x36, 0xD6, 0xD8, 0xCA, 0x01, 0xB4, 
			0xDD, 0x45, 0x6D, 0xB0, 0x0E, 0x33, 0x38, 0x63, 0x79, 0x47, 0x25, 0x97, 0x0E, 0xB9, 0x36, 0x8B, 
			0x04, 0x35, 0x46, 0x99, 0x8D, 0x0A, 0x2A, 0x27, 0x25, 0xA7, 0xC9, 0x18, 0xEA, 0x20, 0x44, 0x78, 
			0x34, 0x62, 0x01, 0xA1, 0xFE, 0xDF, 0x11, 0xAF, 0x3D, 0xAF, 0x1C, 0x5C, 0x3D, 0x67, 0x27, 0x89
		};
		
		((ThreeFish512)cipher).setTweak(new ByteArray(tweak));
		testEncryption(key, plaintext, ciphertext);
	}
	
}
