package de.mslab.ciphers;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class LED128Test extends AbstractCipherTest {
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		cipher = new LED128();
	}
	
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		cipher = null;
	}

	@Test
	public void testDecrypt() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef 
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0x31, 0x31, 0xc2, 0x31, 0x20, 0x5c, 0x36, 0x64 };
		testDecryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testDecrypt80Bit() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0xb9, 0x3d, 0xe1, 0xa7, 0x74, 0x9a, 0x89, 0x0b };
		testDecryption(key, plaintext, ciphertext);
	}

	@Test
	public void testDecrypt96Bit() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0xc7, 0x7d, 0x6a, 0x92, 0xee, 0x0d, 0xc3, 0x66 };
		testDecryption(key, plaintext, ciphertext);
	}

	@Test
	public void testDecrypt112Bit() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0x00, 0x00
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0xb9, 0x69, 0xb2, 0x32, 0xbf, 0x31, 0xf2, 0x18 };
		testDecryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testDecryptEmptyValues() {
		int[] key = { 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		int[] plaintext = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
		int[] ciphertext = { 0x16, 0x50, 0xb2, 0x30, 0xe8, 0xf9, 0x28, 0xbb };
		testDecryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncrypt() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef 
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0x31, 0x31, 0xc2, 0x31, 0x20, 0x5c, 0x36, 0x64 };
		testEncryption(key, plaintext, ciphertext);
	}

	@Test
	public void testEncrypt80Bit() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0xb9, 0x3d, 0xe1, 0xa7, 0x74, 0x9a, 0x89, 0x0b };
		testEncryption(key, plaintext, ciphertext);
	}

	@Test
	public void testEncrypt96Bit() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0xc7, 0x7d, 0x6a, 0x92, 0xee, 0x0d, 0xc3, 0x66 };
		testEncryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncrypt112Bit() {
		int[] key = { 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 
			0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0x00, 0x00
		};
		int[] plaintext = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
		int[] ciphertext = { 0xb9, 0x69, 0xb2, 0x32, 0xbf, 0x31, 0xf2, 0x18 };
		testEncryption(key, plaintext, ciphertext);
	}
	
	@Test
	public void testEncryptEmptyValues() {
		int[] key = { 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		int[] plaintext = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
		int[] ciphertext = { 0x16, 0x50, 0xb2, 0x30, 0xe8, 0xf9, 0x28, 0xbb };
		testEncryption(key, plaintext, ciphertext);
	}
	
}
